<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Code For Fun]]></title>
  <subtitle><![CDATA[I Share, therefore I am]]></subtitle>
  <link href="http://code4fun.cn/atom.xml" rel="self"/>
  <link href="http://code4fun.cn"/>
  <updated>2014-05-05T15:11:42.364Z</updated>
  <id>http://code4fun.cn/</id>
  <author>
    <name><![CDATA[leezhm]]></name>
    <email><![CDATA[leezhm(at)126.com]]></email>
  </author>
  <generator uri="http://zespia.tw/hexo">Hexo</generator>
  <entry>
    <title type="html"><![CDATA[折腾 - 11年MBA换SSD]]></title>
    <link href="http://code4fun.cn/2014-04-20/折腾---11年mba换ssd/"/>
    <id>http://code4fun.cn/2014-04-20/折腾---11年mba换ssd/</id>
    <published>2014-04-20T15:39:04.000Z</published>
    <updated>2014-05-03T17:30:40.000Z</updated>
    <content type="html"><![CDATA[<p>11年的MBP 723，中间各种折腾，12年初升级到了8GB的内存，但是到现在发现还是很慢，换新的RMBP，被老婆以要提前还贷，要买车否决了。经过考虑之后决定更换SSD，曲线救国。</p>
<p>再经过一番权衡后，决定入手Samsung 840 Pro(256G)，然后把原来的750G的硬盘换到基本不用的光驱那去，这样机器就扩充到了256G SSD + 750G的机械盘了。</p>
<p>拆卸安装的过程是相当的简单，记得用配对的螺丝刀（卖硬盘托架和光驱盒子的时候，卖家送了一套。）不然容易坏螺钉啊。对于硬件拆装，比较简单，这里就不做说明，网上有很多的视频教程，只是提醒大家，拆机要注意<code>防静电</code>，不要到时候后悔。</p>
<h2 id="制作安装盘">制作安装盘</h2>
<p>苹果的操作系统其实可以直接通过网络恢复，考虑到恢复时间实在太长，所以最好自己下载然后制作成安装盘，这样安装起来就非常快。</p>
<ul>
<li><p>准备好一个8G以上的空白U盘，准备好另外一台Mac电脑用来制作安装盘。</p>
</li>
<li><p>新的操作系统Mavericks.app可以在AppStore上直接下载。在另一台电脑上把文件下载好，下载后文件Mavericks.app应该在你的/Applications目录下。</p>
</li>
<li><p>插入U盘，执行：</p>
<pre><code>  sudo /Applications/Install<span class="command">\ </span>OS<span class="command">\ </span>X<span class="command">\ </span>Mavericks.app/Contents/Resources/createinstallmedia --volume /Volumes/Untitled --applicationpath /Applications/Install<span class="command">\ </span>OS<span class="command">\ </span>X<span class="command">\ </span>Mavericks.app  --nointeraction
</code></pre><p>   以上命令会将U盘先格式化，然后制作成安装盘，整个过程大概需要40分钟左右。</p>
</li>
</ul>
<h2 id="安装系统">安装系统</h2>
<ul>
<li><p>插入上一步制作好的U盘，启动时按住 option 键，然后选择通过U盘启动。</p>
<blockquote>
<ol>
<li>进入磁盘工具对硬盘进行格式化（<strong><em>你也可以选择不格式化，这样就是覆盖安装</em></strong>）</li>
<li>根据提示进行系统安装，完成整个安装过程大概需要30分钟。</li>
</ol>
</blockquote>
</li>
<li><p>安装完成后，推荐通过<code>App Store</code>的<code>Updates</code>和<code>Purchase</code>页面分别进行系统更新和已购买软件安装。</p>
</li>
</ul>
<h2 id="软件安装">软件安装</h2>
<p>作为一个码农，软件安装推荐按照我下面的顺序，选择安装自己需要的软件。</p>
<ol>
<li><p><code>Homebrew</code>码农<code>Mac OSX</code>程序安装利器（<strong><em>汗，居然要梯子，万恶的GWF</em></strong>）</p>
<pre><code> LIZHM:~ Leezhm$ ruby <span class="operator">-e</span> <span class="string">"<span class="variable">$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)</span>"</span>
</code></pre><p> 安装完成之后推荐进行例行检查，是否完全正确安装，以及版本号。</p>
<pre><code> <span class="constant">LIZHM</span><span class="symbol">:~</span> <span class="constant">Leezhm</span><span class="variable">$ </span>brew doctor
 <span class="constant">Your</span> system is ready to brew.

 <span class="constant">LIZHMs</span><span class="symbol">:~</span> <span class="constant">Leezhm</span><span class="variable">$ </span>brew -v
 <span class="constant">Homebrew</span> <span class="number">0</span>.<span class="number">9.5</span>
</code></pre></li>
<li><p>安装码农代码管理利器<code>Git</code>,并检查安装版本。</p>
<pre><code> <span class="constant">LIZHM</span><span class="symbol">:~</span> <span class="constant">Leezhm</span><span class="variable">$ </span>brew install git
 <span class="constant">LIZHM</span><span class="symbol">:~</span> <span class="constant">Leezhm</span><span class="variable">$ </span>git --version
 git version <span class="number">1.9</span>.<span class="number">2</span>
</code></pre><p> <strong><em>注：</em></strong>如果你的系统中已经安装了低版本的git，请在<code>.bash_profile</code>中添加brew安装软件目录到’PATH’<strong><em>(如果没有.bash_profile，请重新创建)</em></strong></p>
<pre><code> <span class="comment"># The following path contains all soft $PATH which installed by brew</span>
 PATH=<span class="string">"/usr/local/bin:<span class="variable">$PATH</span>"</span>
</code></pre><p> 一切顺利后，在这里需要配置git，然后通过<code>git config --list</code>查看配置情况。</p>
<pre><code> git config --<span class="keyword">global</span> user.email <span class="string">"xxx@yy.com"</span>
 git config --<span class="keyword">global</span> user.name <span class="string">"leezhm"</span>
 git config --<span class="keyword">global</span> core.<span class="keyword">editor</span> <span class="string">"vi"</span> 
 git config --<span class="keyword">global</span> <span class="keyword">color</span>.ui true
</code></pre><p> 最后，既然要用git，肯定少不了高大上的<a href="https://github.com" target="_blank">Github</a>，顺便在这里附带上’Github’的<a href="https://help.github.com/articles/generating-ssh-keys" target="_blank">how to generate a ssh key</a>，以方便后续的使用体验。</p>
</li>
<li><p>由于我的blog是基于<a href="http://hexo.io" target="_blank">Hexo</a>,所以下面用homebrew安装<code>node.js</code>。也许你是别的原因，需要node.js。</p>
<pre><code> <span class="constant">LIZHM</span><span class="symbol">:~</span> <span class="constant">Leezhm</span><span class="variable">$ </span>brew install nodejs
</code></pre><p> 虽然上面安装过程不高大上，但是它方便快捷简单有没有。完成之后也推荐进行版本号检查。</p>
<pre><code> <span class="constant">LIZHM</span><span class="symbol">:~</span> <span class="constant">Leezhm</span><span class="variable">$ </span>node -v
 v<span class="number">0</span>.<span class="number">10.26</span>
 <span class="constant">LIZHM</span><span class="symbol">:~</span> <span class="constant">Leezhm</span><span class="variable">$ </span>npm -v
 <span class="number">1.4</span>.<span class="number">7</span> 
</code></pre></li>
<li><p>使用<code>npm</code>安装高大上的<code>Hexo</code></p>
<pre><code> <span class="constant">LIZHM</span><span class="symbol">:~</span> <span class="constant">Leezhm</span><span class="variable">$ </span>sudo npm install hexo -g
</code></pre><p> 更多问题，比如<code>如何优雅，有格调地撰写blog</code>，请访问<a href="http://hexo.io" target="_blank">Hexo</a>。</p>
</li>
<li><p>iOS开发必备利器，高大上的<code>cocoapods</code>，但是在安装前，请先安以下步骤做些别的准备工作，别问为什么，因为你懂的，但别忘了’感谢’<code>党</code>，‘感谢’<code>祖国</code>，感谢<code>淘宝</code>，感谢教主<code>马云</code>！</p>
<pre><code> <span class="constant">LIZHM</span><span class="symbol">:~</span> <span class="constant">Leezhm</span><span class="variable">$ </span> gem sources --remove <span class="symbol">https:</span>/<span class="regexp">/rubygems.org/</span>
 <span class="symbol">https:</span>/<span class="regexp">/rubygems.org/</span> removed from sources
 <span class="constant">LIZHM</span><span class="symbol">:~</span> <span class="constant">Leezhm</span><span class="variable">$ </span>gem source -a <span class="symbol">http:</span>/<span class="regexp">/ruby.taobao.org/</span>
 <span class="symbol">http:</span>/<span class="regexp">/ruby.taobao.org/</span> added to sources
 <span class="constant">LIZHM</span><span class="symbol">:~</span> <span class="constant">Leezhm</span><span class="variable">$ </span>gem source
 *** <span class="constant">CURRENT</span> <span class="constant">SOURCES</span> ***

 <span class="symbol">http:</span>/<span class="regexp">/ruby.taobao.org/</span>
</code></pre><p> 准备工作做好了，也感谢了，开始正事，安装<a href="http://cocoapods.org/" target="_blank">Cocoapods</a>。</p>
<pre><code> <span class="constant">LIZHM</span><span class="symbol">:~</span> <span class="constant">Leezhm</span><span class="variable">$ </span>sudo gem install cocoapods
</code></pre><p> 别以为到了这里就完事了，如果你不想一直’感谢Dang’，你就应该看看<a href="http://akinliu.github.io/2014/05/03/cocoapods-specs-/" target="_blank">Cocoapods Specs天朝镜像</a>，当然别忘记了感谢<code>阿宽</code>，另外如果你还没有用过<code>Cocoapods</code>，那我也给你附一份教程，请访问<a href="http://code4app.com/article/cocoapods-install-usage" target="_blank">CocoaPods安装和使用教程</a>，同样别忘记了感谢作者，嗯，我，你就算了，留着去’感谢Dang’吧！</p>
</li>
<li><p><code>Xcode</code>, <code>Dash</code>， <code>Sublime Text</code>, <code>Mou</code>等等啥的，可以另外自己安装了，很是简单。</p>
</li>
</ol>
<h2 id="开启Trim">开启Trim</h2>
<p>如果你还不知道<code>trim</code>是个啥，请访问<a href="http://en.wikipedia.org/wiki/Trim_(computing\" target="_blank">Wikipedia-Trim</a>)。</p>
<blockquote>
<p>请先到System Information中SATA Drive Tree中查看<code>TRIM Support</code>是否是<code>Yes</code>，如果不是就需要下面步骤，否则请跳过！</p>
</blockquote>
<ol>
<li><p>为了安全，请先备份驱动(按照提示输入密码)</p>
<pre><code> sudo <span class="keyword">cp</span> -r /System/Library/Extensions/IOAHCIFamily<span class="preprocessor">.kext</span>/Contents/PlugIns/IOAHCIBlockStorage<span class="preprocessor">.kext</span>/ /System/Library/Extensions/IOAHCIFamily<span class="preprocessor">.kext</span>/Contents/PlugIns/IOAHCIBlockStorage<span class="preprocessor">.BACKUP</span>
</code></pre></li>
<li><p>开始trim </p>
<pre><code> sudo perl -pi -e 's|(<span class="command">\x</span>52<span class="command">\x</span>6F<span class="command">\x</span>74<span class="command">\x</span>61<span class="command">\x</span>74<span class="command">\x</span>69<span class="command">\x</span>6F<span class="command">\x</span>6E<span class="command">\x</span>61<span class="command">\x</span>6C<span class="command">\x</span>00<span class="special">{</span>1,20<span class="special">}</span>)<span class="special">[</span>^<span class="command">\x</span>00<span class="special">]</span><span class="special">{</span>9<span class="special">}</span>(<span class="command">\x</span>00<span class="special">{</span>1,20<span class="special">}</span><span class="command">\x</span>54)|<span class="formula">$1<span class="command">\x</span>00<span class="command">\x</span>00<span class="command">\x</span>00<span class="command">\x</span>00<span class="command">\x</span>00<span class="command">\x</span>00<span class="command">\x</span>00<span class="command">\x</span>00<span class="command">\x</span>00$</span>2|sg' /System/Library/Extensions/IOAHCIFamily.kext/Contents/PlugIns/IOAHCIBlockStorage.kext/Contents/MacOS/IOAHCIBlockStorage
</code></pre></li>
</ol>
<h2 id="安装Windows">安装Windows</h2>
<blockquote>
<p>啥，你再说一遍？<br>别闹了，重启开始享受全新的MBP吧！</p>
</blockquote>
]]></content>
    <category scheme="http://code4fun.cn/tags/SSD/" term="SSD"/>
    <category scheme="http://code4fun.cn/tags/Mavericks/" term="Mavericks"/>
    <category scheme="http://code4fun.cn/categories/折腾/" term="折腾"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[How to fork a repo from github]]></title>
    <link href="http://code4fun.cn/2013-09-28/how-to-fork-a-repo-from-github/"/>
    <id>http://code4fun.cn/2013-09-28/how-to-fork-a-repo-from-github/</id>
    <published>2013-09-28T14:18:22.000Z</published>
    <updated>2014-05-03T17:38:02.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li><p>Login the github and click the “Fork” button.</p>
<p>  It’s quite simple, just clicks a button.</p>
</li>
<li><p>Clone your fork</p>
<p>  Make sure it’s your fork. For example, I had forked the project <a href="https://github.com/nburrus/rgbdemo" target="_blank">nburrus/rgbdemo</a>,and now my own fork is <a href="https://github.com/leezhm/rgbdemo" target="_blank">leezhm/rgbdemo</a>.So you can clone your fork.</p>
<pre><code><span class="comment"># Clone your fork</span>
<span class="variable">$ </span>git clone <span class="symbol">https:</span>/<span class="regexp">/github.com/leezhm</span><span class="regexp">/rgbdemo.git</span>
</code></pre></li>
<li><p>Configurate remotes</p>
<p> If you want to sync your fork with its origin master repo,you should add another remote called <strong>upstream</strong></p>
<pre><code><span class="preprocessor"># Change the active directory</span>
$ cd rgbdemo

<span class="preprocessor"># Add the upstream url    </span>
$ git remote add upstream https:<span class="comment">//github.com/nburrus/rgbdemo.git</span>

<span class="preprocessor"># Keeping update with the upstream and merges any changes fetched </span>
<span class="preprocessor"># into your working files</span>
$ git fetch upstream
$ git merge upstream/master
</code></pre></li>
<li><p>Nowadays,you can push/pull your own code to your fork, and sync with origin repo.</p>
</li>
</ul>
]]></content>
    <category scheme="http://code4fun.cn/tags/Git/" term="Git"/>
    <category scheme="http://code4fun.cn/categories/Git/" term="Git"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Explicitly Release Resources In C#]]></title>
    <link href="http://code4fun.cn/2013-09-24/explicitly-release-resources-in-c/"/>
    <id>http://code4fun.cn/2013-09-24/explicitly-release-resources-in-c/</id>
    <published>2013-09-23T17:24:06.000Z</published>
    <updated>2014-05-03T17:39:40.000Z</updated>
    <content type="html"><![CDATA[<p>According the last blog(Here), destructor cannot be called by programmers , it is invoked automatically by GC in a uncertain time.So whether it means programmers need not care about releasing resource(or GC) in C#.</p>
<p>In general, C# do not require as much memory management as is need.This is because the .NET Framework Garbage Collector implicitly manages the allocation and release of memory for your application.However most time, a explicit and accuracy way that programmers can release memory by themselves  is necessary.For example, when your application encapsulate unmanaged resources such as a window, file, font, database connection, network connection, and so on, you will find it very useful and helpful.So how many different and explicit ways can clean up the rare and expensive external resources that using by your application?</p>
<p>Three ways provided on MSDN,for more details about them, see the following parts.</p>
<h2 id="Implementing_a_Dispose_Method">Implementing a Dispose Method</h2>
<p>The IDispose Interface provide Dispose Method,it is used only for unmanaged resource. Do not implement and call it, unless application has encapsulate some unmanaged resources.For all managed resources, the Garbage Collector has a very efficient and implicit way to manage them,please never do the idle work.</p>
<p>A class’s Dispose method should release all resources that it owns and it should also clean up all resources owned by its parent class by calling the parent’s Dispose method,and then, the parent will continue to invoke its base’s Dispose method.To help ensure all resources are always released completely, a Dispose method should be called several times without throwing any exceptions.Do not forget to call SuppressFinalize function in the Dispose,it will prevents the Finalize method from being invoked if current object is on the finalization queue.For more details about Finalize method will be described in the next title, and please remember that Finalize method called by GC automatically and executing a Finalize method is  costly to performance.If a Dispose method was called for release resources,it is not necessary for the Garbage Collector to called the disposed object’s Finalize again.</p>
<p>The following example shows how to implement a Dispose method is a good pattern.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
</pre></td><td class="code"><pre>namespace CSnippets.GC
{
    <span class="keyword">using</span> System;
    <span class="keyword">using</span> System.Collections.Generic;
    <span class="keyword">using</span> System.Linq;
    <span class="keyword">using</span> System.Text;
    <span class="keyword">using</span> System.IO;

    <span class="keyword">public</span> <span class="keyword">class</span> DisposeExample
    {
        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">TestDispose</span>()
        {
            <span class="keyword">try</span>
            {
                <span class="keyword">string</span> path = Environment.CurrentDirectory + <span class="string">"\\App.config"</span>;

                FileStream fs = File.OpenRead(path);

                DisposableResource dr = <span class="keyword">new</span> DisposableResource(fs);
                
                <span class="comment">//</span>
                dr.DoSomethingWithResource();

                <span class="comment">//</span>
                dr.Dispose();
            }
            <span class="keyword">catch</span> (FileNotFoundException expt)
            {
                Console.WriteLine(expt.Message);
            }
        }
    }

    <span class="keyword">public</span> <span class="keyword">class</span> DisposableResource : IDisposable
    {
        <span class="keyword">private</span> Stream resource = <span class="keyword">null</span>;
        <span class="keyword">private</span> <span class="keyword">bool</span> disposed = <span class="keyword">false</span>;

        <span class="keyword">public</span> <span class="title">DisposableResource</span>(Stream stream)
        {
            <span class="keyword">if</span> (<span class="keyword">null</span> == stream)
            {
                <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="string">"stream is null ..."</span>);
            }

            <span class="keyword">if</span> (!stream.CanRead)
            {
                <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">"stream must be readable ..."</span>);
            }

            resource = stream;
            disposed = <span class="keyword">false</span>;
        }

        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoSomethingWithResource</span>()
        {
            <span class="keyword">if</span> (disposed)
            {
                <span class="keyword">throw</span> <span class="keyword">new</span> ObjectDisposedException(<span class="string">"resource was disposed ..."</span>);
            }

            <span class="keyword">int</span> num = (<span class="keyword">int</span>)resource.Length;
            Console.WriteLine(<span class="string">"Number of bytes: {0}"</span>, num.ToString());
        }

        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dispose</span>()
        {
            Dispose(<span class="keyword">true</span>);

            <span class="comment">//  Using SuppressFinalize in case a subclass</span>
            <span class="comment">//  of this type implements a finalizer.</span>
            System.GC.SuppressFinalize(<span class="keyword">this</span>);
        }

        <span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Dispose</span>(<span class="keyword">bool</span> disposing)
        {
            <span class="comment">// If you need thread safety, use a lock around these </span>
            <span class="comment">// operations, as well as in your methods that use the resource.</span>
            <span class="keyword">if</span> (!disposed)
            {
                <span class="keyword">if</span> (disposing)
               {
                    <span class="comment">// Release unmanaged resource</span>

                    <span class="keyword">if</span> (<span class="keyword">null</span> != resource)
                    {
                        resource.Dispose();
                        Console.WriteLine(<span class="string">"Object disposed ..."</span>);
                    }
                }

                <span class="comment">// Release managed resource</span>

               <span class="comment">// Indicate that the instance has been disposed.</span>
                resource = <span class="keyword">null</span>;
                disposed = <span class="keyword">true</span>;
            }
        }
    }
}
</pre></td></tr></table></figure>


<p>Actually,sometimes Close method is also used to release resources such as FileStream.Close.</p>
<h2 id="Overriding_the_Finalize_Method">Overriding the Finalize Method</h2>
<p>Finalize is a protected method provided by the base class Object, so implement the Finalize method in C#, you must use destructor syntax.It is the same as Dispose method, a Finalize method should release all resources its owned and its parent owned by calling its base’s Finalize method.</p>
<p>By default, the Object.Finalize method does nothing,unless override it by yourself.For example, if you want to clean up all resources before system executes the GC, you must override it in your class.and more important thing, you must ensure that a Finalize method should not throw any exceptions, because the application can not handle it and it can cause the application to terminate.</p>
<p>Example is the best documents for programmer, is it right?Please see the below code snippets.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
</pre></td><td class="code"><pre><span class="comment">// Design pattern for a base class.</span>
<span class="keyword">public</span> <span class="keyword">class</span> Base: IDisposable
{
    <span class="keyword">private</span> <span class="keyword">bool</span> disposed = <span class="keyword">false</span>;
 
    <span class="comment">//Implement IDisposable.</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dispose</span>()
    {
        Dispose(<span class="keyword">true</span>);
        GC.SuppressFinalize(<span class="keyword">this</span>);
    }
 
    <span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Dispose</span>(<span class="keyword">bool</span> disposing)
    {
        <span class="keyword">if</span> (!disposed)
	          {
            <span class="keyword">if</span> (disposing)
            {
                <span class="comment">// Free other state (managed objects).</span>
            }
            <span class="comment">// Free your own state (unmanaged objects).</span>
            <span class="comment">// Set large fields to null.</span>
            disposed = <span class="keyword">true</span>;
        }
    }
 
    <span class="comment">// Use C# destructor syntax for finalization code.</span>
    ~Base()
    {
        <span class="comment">// Simply call Dispose(false).</span>
        Dispose (<span class="keyword">false</span>);
    }
}
 
<span class="comment">// Design pattern for a derived class.</span>
<span class="keyword">public</span> <span class="keyword">class</span> Derived: Base
{
    <span class="keyword">private</span> <span class="keyword">bool</span> disposed = <span class="keyword">false</span>;
 
    <span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Dispose</span>(<span class="keyword">bool</span> disposing)
    {
        <span class="keyword">if</span> (!disposed)
        {
            <span class="keyword">if</span> (disposing)
            {
                <span class="comment">// Release managed resources.</span>
            }
            <span class="comment">// Release unmanaged resources.</span>
            <span class="comment">// Set large fields to null.</span>
           <span class="comment">// Call Dispose on your base class.</span>
            disposed = <span class="keyword">true</span>;
        }
        <span class="keyword">base</span>.Dispose(disposing);
    }
    <span class="comment">// The derived class does not have a Finalize method</span>
    <span class="comment">// or a Dispose method without parameters because it inherits</span>
    <span class="comment">// them from the base class.</span>
}
</pre></td></tr></table></figure>

<p>Aha, it looks same as the topic how to implement a Dispose method except the yellow part.Why does it need to do like that?</p>
<p>Actually, Even when you provide explicit calling Dispose method, you should invoke the Finalize method implicitly.The Finalize provide a backup to prevent resources from permanently leaking if the programmer fails to call Dispose method, even executing a Finalize method is an expensive operation.</p>
<p>So what is your opinion?Do you think it is one way and one completely way that do those two ways together to release resources?</p>
<h2 id="Using_the_using_statement">Using the using statement</h2>
<p>Using statement provide a simple and convenient syntax to ensure that a correct way is be used for a IDispose object.It can make sure that Dispose method is called even if an exception occurs.For example, for StreamWriter, the using statement automatically closes the stream and invokes Dispose method on the StreamWriter object at the end of using statement.</p>
<p>Below is a good practice that shows how to use using statement to clean up resources with Font(System.Drawing.Font) object.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre><span class="keyword">using</span> (Font ft = <span class="keyword">new</span> Font(<span class="string">"Arial"</span>, <span class="number">15.0</span>f))
{
    <span class="keyword">byte</span> charset = ft.GdiCharSet;

    Console.WriteLine(<span class="string">"Charset of Arial is {0}"</span>, charset);
}

Font ft2 = <span class="keyword">new</span> Font(<span class="string">"Arial"</span>, <span class="number">10.0</span>f);
<span class="keyword">using</span> (ft2) <span class="comment">// not recommended</span>
{
    <span class="comment">// use font2</span>
    <span class="keyword">byte</span> charset2 = ft2.GdiCharSet;

    Console.WriteLine(<span class="string">"Charset 2 of Arial is {0}"</span>, charset2);
}

<span class="comment">// font2 is still in scope</span>
<span class="comment">// but the method call throws an exception</span>
<span class="keyword">float</span> f = ft2.GetHeight();
</pre></td></tr></table></figure>

<p>Of course, it is a much more complex topic of Garbage Collection in C# and there is several times contents about GC on MSDN than here.More details and comprehensive contents about Garbage Collection,see this webpage.have fun!</p>
]]></content>
    <category scheme="http://code4fun.cn/tags/C-Sharp/" term="C-Sharp"/>
    <category scheme="http://code4fun.cn/tags/Dispose/" term="Dispose"/>
    <category scheme="http://code4fun.cn/categories/C-Sharp/" term="C-Sharp"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[How to resign a iOS app ?]]></title>
    <link href="http://code4fun.cn/2013-09-19/How_to_resign_a_iOS_app/"/>
    <id>http://code4fun.cn/2013-09-19/How_to_resign_a_iOS_app/</id>
    <published>2013-09-19T15:35:28.000Z</published>
    <updated>2014-05-03T17:40:31.000Z</updated>
    <content type="html"><![CDATA[<p>As may we know, we can distribute apps with enterprise account to any devices without add the device id into device list. This is very useful when the developers are not in the same offices or a multi-people project. So how to do that?</p>
<h2 id="Generate_Production/Distribution_Certificates"><strong>Generate Production/Distribution Certificates</strong></h2>
<ol>
<li><p>login the iOS dev center with your enterprise account, and click “Certificates, Identifiers &amp; Profiles”.</p>
</li>
<li><p>Enter “Certificates” page and and select “Production”.</p>
</li>
<li><p>Create a production(or distribution) certificate.(Add button on the top right of panel). Following creating instructions one  by one. During this step, you should note you have to generate a Certificate Signing Request from Keychain Access and them uploading it.(Here you can learn how to obtain a CSR <a href="http://stackoverflow.com/questions/12126496/how-to-obtain-certificate-signing-request" target="_blank">how to obtain CSR</a></p>
</li>
<li><p>Ok, you can download the the certificates if the third step successes.</p>
</li>
<li><p>Double click the certificate, and then you can find this certificate in Keychain Access.</p>
</li>
</ol>
<h2 id="Generate_Distribution_Provision_Profile"><strong>Generate Distribution Provision Profile</strong></h2>
<ol>
<li><p>Changed to the “Provisioning Profiles” item and click “Distribution”.</p>
</li>
<li><p>Select and Click “Add” button on the top right of panel.</p>
</li>
<li><p>Following instructions one by one, “In-House” Provision Profiles and right “Production/Distribution Certificate” that you create before.</p>
</li>
<li><p>Success, and download it.</p>
</li>
<li><p>Double click to add it to x-code.</p>
</li>
</ol>
<p>OK, you have finish the preparation. and next you can resign the iOS app.</p>
<h2 id="Resign_iOS_App"><strong>Resign iOS App</strong></h2>
<p>Before execute the following commands in your Terminal tool one by one., please make the <em>.ipa file, </em>.mobileprovision file in the same folder. for example, put all file in “~/Downloads” folder.</p>
<pre><code>rm -rf Payload
unzip YourApp<span class="preprocessor">.ipa</span>
rm -r Payload/YourApp<span class="preprocessor">.app</span>/_CodeSignature Payload/YourApp<span class="preprocessor">.app</span>/CodeResources
<span class="keyword">cp</span> ~/Downloads/YourApp<span class="preprocessor">.mobileprovision</span> Payload/YourApp<span class="preprocessor">.app</span>/embedded<span class="preprocessor">.mobileprovision</span>

codesign -f -s <span class="string">"iPhone Distribution: xxxx"</span> --resource-rules 
<span class="string">"Payload/YourApp.app/ResourceRules.plist"</span> Payload/YourApp<span class="preprocessor">.app</span>

zip -qr <span class="string">"YourApp.resigned.ipa"</span> Payload
rm -rf Payload
</code></pre><p>If there is not any error, you are successful. Please install the app to you iOS device and test it.</p>
]]></content>
    <category scheme="http://code4fun.cn/tags/iOS/" term="iOS"/>
    <category scheme="http://code4fun.cn/categories/iOS/" term="iOS"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[艳阳中秋，呆家里折腾新Blog]]></title>
    <link href="http://code4fun.cn/2013-09-19/艳阳中秋，呆家里折腾新blog/"/>
    <id>http://code4fun.cn/2013-09-19/艳阳中秋，呆家里折腾新blog/</id>
    <published>2013-09-19T09:10:28.000Z</published>
    <updated>2014-05-03T17:48:29.000Z</updated>
    <content type="html"><![CDATA[<h2 id="闲扯由来">闲扯由来</h2>
<p>之前基于<a href="http://wordpress.org/" target="_blank">wordpress</a>的blog在VPS到期后，就不想续费折腾了。在这里还是要感谢这个伟大的开源项目，你带给我了许多方便。</p>
<p>其实我觉得我是个很懒的完美主义者，话有点不顺口，细想也不通的，但是我就是这么认为的。每每总结留在硬盘上的一篇篇未写完的blog，理由就是排版这么烂，发上去也需要再排，而且还复杂，不好看。故因为不完美，所以放弃了。曾经有一段时间我就去折腾CSS，但很快发现也没那么容易折腾，花了时间还来不了效果。</p>
<p>一切都在我接触到<a href="http://wowubuntu.com/markdown/" target="_blank">markdown</a>之后改变，简洁的语法，更多的时间可以focus到内容上。但是wordpress对于markdown支持的并不好，所以就一直寻找一个直接支持markdown语法的blog framework。</p>
<p>在经过多次的测试和咨询之后，答案就是 <a href="https://github.com" target="_blank">Github</a> + <a href="http://hexo.io/" target="_blank">Hexo</a>。由来废话说完，就应该进入主题了—折腾不止，生命不息</p>
<h2 id="切入正题">切入正题</h2>
<ul>
<li><p>Github</p>
<p>  绝大部分程序猿肯定都知道<a href="https://github.com" target="_blank">Github</a>，也应该拥有自己的账号。如果没有，你现在就应该去创建一个，而且后面也需要用到这个。通过Github，我们可以很方便地分享我们的项目，进行代码管理,重构，与他人协作完成一个项目（当然如果你需要创建私人项目，你需要付费）。</p>
<p>  但是在这里，需要用Github提供的<a href="http://pages.github.com/" target="_blank">Github Pages</a>来做我新Blog的服务器。</p>
<blockquote>
<ol>
<li>Github Pages完全免费，无流量和空间限制，无需翻墙，墙内墙外访问速度还不错。</li>
<li>支持Markdown语法来发布文章</li>
<li>可以很方便地用git来add, commit和push我的文章。</li>
<li>对blog拥有完全的控制权。</li>
</ol>
</blockquote>
</li>
<li><p>Hexo</p>
<p>  其实<a href="http://hexo.io/" target="_blank">Hexo</a>对于我也是蛮陌生的。那为啥选择Hexo，而不选择更成熟，更多人使用的<a href="http://octopress.org/" target="_blank">Octopress</a>呢？因为我学过一段时间的<a href="http://nodejs.org/" target="_blank">Node.js</a>,更喜欢Node.js的速度，绝对比基于Ruby的Octopress快。</p>
<blockquote>
<p>Hexo is a fast, simple and powerful blog framework. It parses your posts with     Markdown or other render engine and generates static files with the beautiful theme.     All of these just take seconds.</p>
</blockquote>
</li>
</ul>
<h2 id="安装搭建">安装搭建</h2>
<ol>
<li><p><a href="http://code.google.com/p/git-osx-installer/" target="_blank">Git</a>，下载安装git for mac，完成后查看版本信息</p>
<pre><code> <span class="comment">git</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">version</span>
</code></pre></li>
<li><p><a href="http://nodejs.org/" target="_blank">Node.js</a>，可以去官网下载pkg文件安装，但是这里我选择通过nvm安装。</p>
<pre><code> // 安装nvm
 curl https://raw<span class="preprocessor">.github</span><span class="preprocessor">.com</span>/creationix/nvm/master/install<span class="preprocessor">.sh</span> | sh

 // 然后安装Node<span class="preprocessor">.js</span>
 nvm install <span class="number">0.10</span><span class="number">.18</span>
</code></pre></li>
<li><p>通过npm安装Hexo(注意这里是npm，不是nvm)</p>
<pre><code> npm <span class="keyword">install</span> -g hexo
</code></pre><p> 或者升级</p>
<pre><code> npm <span class="operator"><span class="keyword">update</span> hexo -g</span>
</code></pre></li>
<li><p>安装完成后，就可以初始化hexo，</p>
<pre><code> <span class="comment">// 在这里，你需要确保你的目录正确</span>
 hexo init ~<span class="regexp">/Developments/</span>Code4fun/Hexo
</code></pre><p>在指定目录生成了如下结构的文件</p>
<pre><code>  .
 ├── _config.yml   <span class="comment">// 站点配置文件，包含很多站点配置选项，比如域名</span>
 ├── <span class="keyword">package</span>.json  <span class="comment">// 应用程序数据，比如程序名字，版本号等</span>
 ├── scaffolds     <span class="comment">// 存储要发布的post的基本文件</span>
 ├── scripts       <span class="comment">// js文件，保存一个hexo的js扩展文件</span>
 ├── source        <span class="comment">// 保存文章内容</span>
 |   ├── _drafts   <span class="comment">// 草稿文件</span>
 |   └── _posts    <span class="comment">// 发布的文章</span>
 └── themes        <span class="comment">// 主题文件夹</span>
</code></pre></li>
</ol>
<h2 id="配置站点">配置站点</h2>
<ol>
<li><p>配置 config.yml</p>
<pre><code> # Site
 title: Code <span class="keyword">For</span> Fun
 subtitle: I Share, therefore I am
 description: A iOS developer’s personal blog.
 author: Jerry li
 email: leezhm(at)<span class="number">126</span>.com
 language: zh-CN

 # URL
 # <span class="keyword">If</span> your site <span class="keyword">is</span> put <span class="keyword">in</span> a subdirectory, <span class="keyword">set</span> url 
 # <span class="keyword">as</span> <span class="string">'http://yoursite.com/child'</span> <span class="keyword">and</span> root <span class="keyword">as</span> <span class="string">'/child/'</span>
 url: http:<span class="comment">//code4fun.cn</span>
 root: /
 permalink: :year-:month-:day/:title/
</code></pre></li>
<li><p>本地测试</p>
<pre><code> <span class="comment">// 生成文章</span>
 hexo generate 

 <span class="comment">// 运行默认的server</span>
 hexo <span class="keyword">server</span>
 <span class="comment">//[info] Hexo is running at localhost:4000/. Press Ctrl+C to stop.</span>
</code></pre><p> 然后在你的浏览器中输入网址<a href="http://localhost:4000" target="_blank">localhost:4000</a>，测试。看是否可以看到默认页面。</p>
<p> 测试成功后，我们就需要把它送到Github Pages服务器上。</p>
</li>
</ol>
<ol>
<li>Github Pages</li>
</ol>
<ul>
<li><p>如果没有<a href="https://github.com" target="_blank">Github</a>账号，请创建一个账号，然后创建一个Repository。</p>
<ul>
<li><p>创建一个blog网站</p>
<p>如果为一个blog创建网站，Github Pages有特殊的规定，这个repository的名字格式必须是 </p>
<p><strong><em>你的Github账户名.github.com(比如我的就是 leezhm.github.com)</em></strong></p>
<p>否则Github无法提供解析。</p>
</li>
<li><p>为一个Project创建Page</p>
<p>在这里，需要特别注意的是，Github Pages规定这个repo的branch必须是gh-pages，否则不能正确解析页面。至于怎么在Github上创建branch，并设置default branch，请查询Github Help。</p>
<p><strong>BTW:</strong>创建和删除branch<a href="https://help.github.com/articles/creating-and-deleting-branches-within-your-repository" target="_blank">Github - Create/Delete branch</a>，以及<a href="https://help.github.com/articles/setting-the-default-branch" target="_blank">Github - Set default branch</a>网址。</p>
</li>
</ul>
</li>
<li><p>配置config.yml中的deploy(<strong><em>在这里我选择的是创建一个blog网站</em></strong>)</p>
<pre><code>  <span class="preprocessor"># Deployment</span>
  <span class="preprocessor"># Docs: http://zespia.tw/hexo/docs/deploy.html</span>
  deploy:
        type: github
  repository: https://github<span class="preprocessor">.com</span>/leezhm/leezhm<span class="preprocessor">.github</span><span class="preprocessor">.com</span><span class="preprocessor">.git</span>
</code></pre><p>  在这里，需要注意不要写错地址，最好用https。另外branch应该是根据创建的类型不同，做更更改的。</p>
</li>
</ul>
<ul>
<li><p>生成并发布你网站</p>
<pre><code>  <span class="comment"> // 从Markdown生成静态html文件，然后上传至你的repo中</span>
   hexo deploy <span class="comment">--generate</span>
</code></pre><p>  到此应该大功告成，等待大约10分钟之后，你就应该可以使用 <a href="http://你的github账号名.github.io" target="_blank">http://你的github账号名.github.io</a> 来访问你的网站。</p>
</li>
</ul>
<h2 id="补充">补充</h2>
<p>如果你需要配置自己域名，请参考<a href="http://zespia.tw/hexo/docs/deployment.html" target="_blank">Hexo Custom Domain</a>以及<a href="https://help.github.com/articles/setting-up-a-custom-domain-with-pages" target="_blank">Setting up a custom domain with Pages</a>。</p>
]]></content>
    <category scheme="http://code4fun.cn/tags/Github Pages/" term="Github Pages"/>
    <category scheme="http://code4fun.cn/tags/Hexo/" term="Hexo"/>
    <category scheme="http://code4fun.cn/categories/Hexo/" term="Hexo"/>
  </entry>
</feed>
